openapi: '3.0.2'
info:
  title: Karya Box Server API
  description: This document describes the API between the Karya box server and
    the android client.
  license:
    name: MIT
  version: '1.0'

servers:
  - url: '/api/v1'

paths:
  /auth/otp/generate:
    put:
      description: Generate a new OTP for a worker.
      tags: 
        - auth
      parameters:
        - name: phone-number
          in: header
          required: true
          schema: { type: string }

      responses:
        200:
          description: Successfully generated and sent OTP.

        400:
          description: Missing phone number in header

        401:
          $ref: '#/components/responses/Unauthorized'

        403:
          description: Access code is already used by another phone number.

        429:
          description: Request rate for sending OTP exceeded. Rate will be
            by the server.

        503:
          description: Unable to send OTP. Or OTP service currently unavailable.

  /auth/otp/resend:
    put:
      description: Resend OTP previously generated.
      tags: 
        - auth
      parameters:
        - name: phone-number
          in: header
          required: true
          schema: { type: string }

      responses:
        200:
          description: Successfully resent OTP.

        400:
          description: Missing phone number. OTP was never sent for this record.

        401:
          $ref: '#/components/responses/Unauthorized'

        403:
          description: Access code is already used by another phone number.

        429:
          description: OTP already resent once.

        503:
          description: Unable to send OTP. Or OTP service currently unavailable.

  /auth/otp/verify:
    put:
      description: Verify the OTP sent for the worker. On successful verification,  returns a list of user profiles
        associated with the phone number
      tags: 
        - auth
      parameters:
        - name: phone-number
          in: header
          required: true
          schema: { type: string }
        - name: otp
          in: header
          required: true
          schema: { type: string }
      responses:
        200:
          description: OTP successfully verified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpVerifiedResponse'
                      

        400:
          description: Missing phone number / OTP.

        401:
          $ref: '#/components/responses/Unauthorized'

        403:
          description: Access code is already used by another phone number.

        408:
          description: Time limit exceeded before the verify request was sent.

  /auth/profile/verify:
    put:
      description: Verify the OTP sent for the worker. On successful verification,  returns a list of user profiles
        associated with the phone number
      tags: 
        - auth
      security:
        - PhoneToken: []
      parameters:
        - name: phone-number
          in: header
          required: true
          schema: { type: string }
        - name: worker-id
          in: header
          required: true
          schema: { type: string }

      responses:
        200:
          description: Phone number successfuly verified with a profile. Returns a karya-id-token
            having phone-number and worker-id information
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/ProfileVerifiedResponse'
                 
        400:
          description: Missing phone number / worker-id.

        401:
          $ref: '#/components/responses/Unauthorized'

        408:
          description: Time limit exceeded before the verify request was sent.
          
  /auth/profile/create:
    put:
      description: Create a new worker profile after a phone number has been verified.
      tags: 
        - auth
      security:
        - PhoneToken: []
      parameters:
        - name: phone-number
          in: header
          required: true
          schema: { type: string }
        - name: access-code
          in: header
          required: true
          schema: { type: string }

      responses:
        200:
          description: Phone number successfuly verified with a profile. Returns a karya-id-token
            having phone-number and worker-id information
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/ProfileVerifiedResponse'

        400:
          description: Missing phone number / worker-id.

        401:
          $ref: '#/components/responses/Unauthorized'

        408:
          description: Time limit exceeded before the verify request was sent.

  /auth/renew_id_token:
    put:
      description: Get new id_token.
      tags: 
        - auth
      security:
        - IDToken: []

      responses:
        200:
          description: Newly generated id_token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_token:
                    type: string

        400:
          description: Invalid or an empty request.

        401:
          $ref: '#/components/responses/Unauthorized'

  /worker:
    get:
      description: Get a worker record. The worker can identify themselves using
        their unique access code or the id token previously received from the
        server. When using access code, this end point just returns the default
        language associated with the corresponding worker record and if the
        worker has already been registered (used to determine the registration
        flow post OTP verification).
      tags: 
        - worker
      security:
        - AccessCode: []
        - IDToken: []

      responses:
        200:
          description: Worker authorized successfully. Returned partial worker
            record if access code was used for authentication, or full worker
            record if id token was used.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    description: Response if id token is used for auth
                    $ref: '#/components/schemas/Worker'
                  - type: object
                    description: Response if access code is used for auth
                    properties:
                      id:
                        type: string
                        description: Unique ID of the worker on the platform
                      language:
                        type: string
                        description: Code of the default language for the worker
                          record.
                      reg_mechanism:
                        type: string
                        description: Mechanism through which user is registered.
                          null indicates user is not yet registered.

        401:
          $ref: '#/components/responses/Unauthorized'

    put:
      description: Update the "updatable" parameters of a worker. The worker can
        identify themselves using id token that is sent after the registration.
        The action query parameter describes if the request is a simple update
        of for registering the worker. For registration, year of birth and
        gender are required parameters.
      tags: 
        - worker
      parameters:
        - name: action
          description: Specifies the type of update. Can be 'register' or 'update'.
          schema: { type: string }
          in: query
          required: true

      security:
        - IDToken: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                yob:
                  type: string
                  description: Year of birth. Required with registration.
                gender:
                  type: string
                  description: Gender. Required with registration.
                # TODO: List other updatable parameters here

      responses:
        200:
          description: Request executed successfully. Returned entire worked record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Worker'

        400:
          description: Action query parameter is not present, or required fields
            are not present with registration, or an empty update.

        401:
          $ref: '#/components/responses/Unauthorized'
          
  /worker/assign_code:
    description: Add the user to requested access code 
    put:
      description: Add the user to requested access code
      tags: 
        - worker
      security:
        - IdToken: []
      parameters:
        - name: access-code
          in: header
          required: true
          schema: { type: string }
      responses:
        200:
          description: ""

  /language_assets/{code}:
    get:
      description: Get the file asset for the language with the specified code.
        The response will be a tar ball with all audio files.
      tags: 
        - language
      parameters:
        - name: code
          description: ISO 639-1 code for the language
          schema: { type: string }
          in: path
          required: true

      security:
        - AccessCode: []
        - IDToken: []

      responses:
        200:
          description: Successfully returned language asset to worker.
          content:
            application/tgz:
              schema:
                type: string
                format: binary

        401:
          $ref: '#/components/responses/Unauthorized'

        400:
          description: Missing or invalid language code in path

        404:
          description: No assets for the specified language

  /assignment/{id}/input_file:
    get:
      description: Get the input file for a particular assignment.
      tags: 
        - assignment
      parameters:
        - name: id
          description: ID of the assignment
          in: path
          schema: { type: string }
          required: true

      security:
        - IDToken: []

      responses:
        200:
          description: Successfully returned input file to worker.
          content:
            application/tgz:
              schema:
                type: string
                format: binary

        401:
          $ref: '#/components/responses/Unauthorized'

        403:
          description: Assignment was not made to the requesting user.

        404:
          description: Assignment does not exist with the given id or the
            particular assignment does not have an input file.

  /assignment/{id}/output_file:
    post:
      description: Submit the output file for a particular assignment.
      tags: 
        - assignment
      parameters:
        - name: id
          description: ID of the assignment
          in: path
          schema: { type: string }
          required: true

      security:
        - IDToken: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                algorithm:
                  type: string
                  description: Algorithm used to create the checksum
                checksum:
                  type: string
                  description: Checksum for the uploaded file

      responses:
        200:
          description: Successfully created (or updated) output file for
            assignment. Returned the karya file record for the file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KaryaFile'

        400:
          description: Missing fields in the request body, or no file or invalid
            checksum.

        401:
          $ref: '#/components/responses/Unauthorized'

        403:
          description: Assignment was not made the the requesting user.

        404:
          description: Assignment does not exist for the given ID.

  /worker/log_file:
    post:
      description: Upload or replace a log file created for the current worker.
      tags: 
        - worker
      security:
        - IDToken: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                algorithm:
                  type: string
                  description: Algorithm used to create the checksum
                checksum:
                  type: string
                  description: Checksum for the uploaded file
                timestamp:
                  type: string
                  description: Unique timestamp to identify the file with (e.g.,
                    date on which it was created).

      responses:
        200:
          description: Successfully created (or updated) log file for worker.
            Returns the karya file record for the newly created file.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KaryaFile'

        400:
          description: Missing fields in the request body, or no file or invalid
            checksum.

        401:
          $ref: '#/components/responses/Unauthorized'

  /assignments:
    put:
      description: Submit all completed and skipped assignments.
      tags: 
        - assignment
      security:
        - IDToken: []

      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MicrotaskAssignment'

      responses:
        200:
          description: Successfully received all completed/skipped assignments.
            Returns the IDs of all the received assignments.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

        400:
          description: Invalid or an empty request.

        401:
          $ref: '#/components/responses/Unauthorized'

    get:
      description: Get assignments (new or verified) that were last updated
        beyond the timestamp specified in the request. For new assignments, the
        response includes all the microtask records and the task information
        associated with the assignments. For verified assignments, the response
        only includes the relevant information from the list of assignments.
      tags: 
        - assignment
      parameters:
        - name: type
          description: Type of assignments to get (new or verified)
          in: query
          required: true
          schema: { type: string }

        - name: from
          description: ISO formatted timestamp describing the time from which
            assignment updates should be collected
          in: query
          required: false
          schema: { type: string }

      security:
        - IDToken: []

      responses:
        200:
          description: Successfully sent list of assignments to the worker.
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    description: Response to new assignments
                    properties:
                      assignments:
                        type: array
                        description: List of new assignments
                        items:
                          $ref: '#/components/schemas/MicrotaskAssignment'
                      microtasks:
                        type: array
                        description: List of microtasks for the assignments
                        items:
                          $ref: '#/components/schemas/Microtask'
                      tasks:
                        type: array
                        description: List of tasks for the microtasks
                        items:
                          $ref: '#/components/schemas/Task'

                  - type: array
                    description: Response to verified assignments
                    items:
                      $ref: '#/components/schemas/MicrotaskAssignment'

        400:
          description: Missing type or from fields in query.

        401:
          $ref: '#/components/responses/Unauthorized'
               
  /skipped_expired_assignments:
    put:
      description: Submit all skipped and expired assignments.
      tags: 
        - assignment
      security:
        - IDToken: []

      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MicrotaskAssignment'

      responses:
        200:
          description: Successfully received all skipped/expired assignments.
            Returns the IDs of all the received assignments.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

        400:
          description: Invalid or an empty request.

        401:
          $ref: '#/components/responses/Unauthorized'
          
  # THIS PATH IS NOWHERE USED
  /skipped_assignments:
    put:
      description: Submit all skipped assignments.
      tags: 
        - assignment
      security:
        - IDToken: []

      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MicrotaskAssignment'

      responses:
        200:
          description: Successfully received all skipped/expired assignments.
            Returns the IDs of all the received assignments.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

        400:
          description: Invalid or an empty request.

        401:
          $ref: '#/components/responses/Unauthorized'
 
  /payments/accounts:
    post:
      description: Add new payment account to the requested user.
      tags: 
        - payments
      security:
        - IDToken: []
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentAccountRequest'

      responses:
        200:
          description: Successfully received all skipped/expired assignments.
            Returns the IDs of all the received assignments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInfoResponse'

        400:
          description: Request body is not valid.

        401:
          $ref: '#/components/responses/Unauthorized'

  /payments/accounts/{id}/verify:
    put:
      description: Verify an account using a 2 rupees transaction.
      tags: 
        - payments
      security:
        - IDToken: []
        
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentVerifyRequest'
                
      
      # header pr security?
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: required id token for authentication

      responses:
        200:
          description: Successfully received all skipped/expired assignments.
            Returns the IDs of all the received assignments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInfoResponse'

        400:
          description: Missing field in body - confirm, Account Id is not valid, Account Id is not associated with the worker, Provided account id has the status *(account need to to be verified), 

        401:
          $ref: '#/components/responses/Unauthorized'
          
  /payments/accounts/current:
    get:
      description: Return lastest account with the worker_id.
      tags: 
        - payments
      security:
        - IDToken: []

      responses:
        200:
          description: Successfully received all skipped/expired assignments.
            Returns the IDs of all the received assignments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentInfoResponse'

        400:
          description: Invalid or an empty request.

        401:
          $ref: '#/components/responses/Unauthorized'
          
  /payments/transaction:
    get:
      description: Get transaction records for a user from time.
      tags: 
        - payments
      security:
        - IDToken: []
      
      # header pr security?
      parameters:
        - in: query
          name: from
          schema:
            type: string
          required: true
          description: time

      responses:
        200:
          description: Successfully received all transaction
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/PaymentInfoResponse'

        400:
          description: Missing or invalid from time.

        401:
          $ref: '#/components/responses/Unauthorized'
  
  # THIS PATH IS NOWHERE USED
  /payments/worker/{id}/balance:
    get:
      description: Submit all skipped assignments.
      tags: 
        - payments
      security:
        - IDToken: []
      
      # header pr security?
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: required id token for authentication

      responses:
        200:
          description: Successfully received all skipped/expired assignments.
            Returns the IDs of all the received assignments.
          content:
            application/json:
              schema:
                type: object
                properties:
                  worker_balance:
                    type: number
                  total_spent:
                    type: number

        400:
          description: Invalid or an empty request.

        401:
          $ref: '#/components/responses/Unauthorized'
          
  /payments/worker/earnings:
    get:
      description: Submit all skipped assignments.
      tags: 
        - payments
      security:
        - IDToken: []

      responses:
        200:
          description: Successfully received all skipped/expired assignments.
            Returns the IDs of all the received assignments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerEarningsResponse'

        400:
          description: Invalid or an empty request.

        401:
          $ref: '#/components/responses/Unauthorized'

components:
  schemas:
    Worker:
      type: object
      properties:
        worker_id:
          type: string
        reg_mechanism:
          type: string
        phone_number:
          type: string
        auth_id:
          type: string
        id_token:
          type: string
        full_name:
          type: string
        year_of_birth:
          type: string
        gender:
          type: string
        language:
          type: string
        created_at:
          type: string
        last_updated_at:
          type: string

    OtpVerifiedResponse: 
      type: object
      properties:
        karya-phone-token:
          type: string
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/Worker'

    ProfileVerifiedResponse: 
      type: object
      properties:
        karya-id-token:
          type: string
        profile:
          $ref: '#/components/schemas/Worker'

    KaryaFile:
      type: object
      properties:
        id:
          type: string
        container_name:
          type: string
        name:
          type: string
        creator:
          type: string
        creator_id:
          type: string
        algorithm:
          type: string
        checksum:
          type: string
        in_box:
          type: boolean
        in_server:
          type: boolean
        created_at:
          type: string
        last_updated_at:
          type: string

    MicrotaskAssignment:
      type: object
      properties:
        id:
          type: string
        microtask_id:
          type: string
        worker_id:
          type: string
        deadline:
          type: string
        status:
          type: string
        completed_at:
          type: string
        output:
          type: object
        output_file_id:
          type: string
        logs:
          type: object
        verified_at:
          type: string
        report:
          type: object
        credits:
          type: number
        created_at:
          type: string
        last_updated_at:
          type: string

    Microtask:
      type: object
      properties:
        id:
          type: string
        task_id:
          type: string
        group_id:
          type: string
        input:
          type: object
        input_file_id:
          type: string
        deadline:
          type: string
        credits:
          type: number
        status:
          type: string
        output:
          type: object
        created_at:
          type: string
        last_updated_at:
          type: string

    Task:
      type: object
      properties:
        id:
          type: string
        work_provider_id:
          type: string
        language_code:
          type: string
        scenario_name:
          type: string
        name:
          type: string
        description:
          type: string
        display_name:
          type: string
        params:
          type: object
        tags:
          type: object
        deadline:
          type: string
        assignment_granularity:
          type: string
        group_assignment_order:
          type: string
        microtask_assignment_order:
          type: string
        status:
          type: string
        created_at:
          type: string
        last_updated_at:
          type: string
          
    PaymentAccountRequest:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/PaymentAccount'
        name:
          type: string
        type:
          type: string
          
    PaymentInfoResponse:
      type: object
      properties:
        account_type:
          type: string
        active:
          type: boolean
        fund_id:
          type: string
        id:
          type: string
        meta:
         $ref: '#/components/schemas/PaymentMeta'
        status:
          type: string
    
    PaymentMeta:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/PaymentAccount'
        name:
          type: string
          
    PaymentAccount:
      type: object
      properties:
      # is id account_number or what?
        id:
          type: string
        ifsc:
          type: string
          
    PaymentVerifyRequest:
      type: object
      properties:
        confirm:
          type: boolean
          
    WorkerEarningsResponse:
      type: object
      properties:
        total_paid:
          type: number
        week_earned:
          type: number
        total_earned:
          type: number



  securitySchemes:
    AccessCode:
      type: apiKey
      description: Unique access code provided to each worker. This
        authentication method can be used for the end points that help associate
        a phone number to the corresponding worker record, and end points that
        are not worker specific (e.g., get language assets).
      in: header
      name: access-code

    IDToken:
      type: apiKey
      description: ID token generated by the server upon successful verification
        of the profile. This proves the ownership of that user over a phone number.
      in: header
      name: karya-id-token

    PhoneToken:
      type: apiKey
      description: ID token generated by the server upon successful verification
        of the OTP.
      in: header
      name: karya-phone-token

  responses:
    Unauthorized:
      description: Missing or invalid authentication information
